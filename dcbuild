#!/bin/bash

# üìç Resolve absolute path to script directory (even if symlinked)
SOURCE="${BASH_SOURCE[0]:-$0}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# üì• Load environment variables
ENV_FILE="${SCRIPT_DIR}/.env"
if [[ -f "$ENV_FILE" ]]; then
  source "$ENV_FILE"
else
  echo "‚ùå Missing .env file: $ENV_FILE"
  exit 1
fi

# üÜò Help output
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "DESCRIPTION: Builds and pushes a multi-arch Docker image using buildx for a given service and build stage."
  echo
  echo "USAGE:"
  echo "  dcbuild <service> <tag1> [tag2 ...] [--stage <stage>]"
  echo
  echo "EXAMPLES:"
  echo "  dcbuild node v0.01                    # builds dev stage (default)"
  echo "  dcbuild node v0.01 latest             # builds dev stage, tags as latest"
  echo "  dcbuild node v0.01 latest --stage prod"
  echo
  echo "This will build and push:"
  echo "  ${DOCKERHUB_NAMESPACE}/${IMAGE_PREFIX}-<service>:<tag(s)>"
  exit 0
fi

SERVICE="$1"; shift

# üîÅ Parse positional args
TAGS=()
BUILD_TARGET="${DEFAULT_BUILD_TARGET:-dev}"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --stage)
      BUILD_TARGET="$2"
      shift 2
      ;;
    *)
      TAGS+=("$1")
      shift
      ;;
  esac
done

# ‚úÖ Validate args
if [[ -z "$SERVICE" || "${#TAGS[@]}" -eq 0 ]]; then
  echo "‚ùå Usage: dcbuild <service> <tag1> [tag2 ...] [--stage <stage>]"
  echo "Try: dcbuild --help"
  exit 1
fi

echo "üì¶ Building stage: ${BUILD_TARGET}"

IMAGE_NAME="utilcntr-${SERVICE}"
FULL_IMAGE="${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}"
SERVICE_PATH="${SCRIPT_DIR}/${SERVICE}"

# üîç Check if service directory exists
if [[ ! -d "$SERVICE_PATH" ]]; then
  echo "‚ùå Service directory does not exist: $SERVICE_PATH"
  exit 1
fi

# üîß Ensure buildx builder exists
if ! docker buildx inspect >/dev/null 2>&1; then
  echo "üîß Creating buildx builder..."
  docker buildx create --use
fi

# üè∑ Prepare tags
BUILD_TAG_ARGS=()
for tag in "${TAGS[@]}"; do
  echo "üè∑ Adding tag: ${FULL_IMAGE}:${tag}"
  BUILD_TAG_ARGS+=( "--tag" "${FULL_IMAGE}:${tag}" )
done

# üöÄ Build and push for multi-arch
docker buildx build \
  --no-cache \
  --platform linux/amd64,linux/arm64 \
  --target "${BUILD_TARGET}" \
  "${BUILD_TAG_ARGS[@]}" \
  --push \
  "$SERVICE_PATH"

