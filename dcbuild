#!/bin/bash

# 📍 Resolve absolute path to script directory (even if symlinked)

# Get the source of the script: BASH_SOURCE[0] if available, else fallback to $0
SOURCE="${BASH_SOURCE[0]:-$0}"

# Follow symlinks until we reach the real file
while [ -h "$SOURCE" ]; do
  # Get the directory that contains the symlink
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  # Resolve the symlink target
  SOURCE="$(readlink "$SOURCE")"
  # If the resolved path is relative, prepend the directory to make it absolute
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done

# Get the absolute path of the script's directory after resolving all symlinks
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# 📥 Load environment variables
ENV_FILE="${SCRIPT_DIR}/.env"
if [[ -f "$ENV_FILE" ]]; then
  # All variables now availble here
  source "$ENV_FILE"
else
  echo "❌ Missing .env file: $ENV_FILE"
  exit 1
fi

# 🆘 Help output
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "DESCRIPTION: Builds and pushes a multi-arch Docker image using buildx for a given service and build stage."
  echo
  echo "USAGE:"
  echo "  dcbuild <service> <tag1> [tag2 ...] [--stage <stage>]"
  echo
  echo "EXAMPLES:"
  echo "  dcbuild node v0.01                    # builds dev stage (default)"
  echo "  dcbuild node v0.01 latest             # builds dev stage, tags as latest"
  echo "  dcbuild node v0.01 latest --stage prod"
  echo
  echo "This will build and push:"
  echo "  ${DOCKERHUB_NAMESPACE}/${IMAGE_PREFIX}-<service>:<tag(s)>"
  exit 0
fi

SERVICE="$1"  # Grab the first positional argument
shift         # Shift all arguments to the left

# 🔁 Parse positional args
TAGS=()
# DEFAULT_BUILD_TARGET from .env, `dev` is default
BUILD_TARGET="${DEFAULT_BUILD_TARGET:-dev}"

# 🔁 Loop over all remaining command-line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    # 🎯 If the argument is --stage, capture the next arg as the build stage
    --stage)
      BUILD_TARGET="$2"  # Assign the value after --stage to BUILD_TARGET
      shift 2            # Shift past both --stage and its value
      ;;
    # 🏷 Otherwise, treat the argument as a tag (like v0.01 or latest)
    *)
      TAGS+=("$1")       # Append current arg to the TAGS array
      shift              # Shift past this argument
      ;;
  esac
done

# ✅ Validate args
# is $SERVICE var empty? is TAGS array also empty, i.e. 0?
if [[ -z "$SERVICE" || "${#TAGS[@]}" -eq 0 ]]; then
  echo "❌ Usage: dcbuild <service> <tag1> [tag2 ...] [--stage <stage>]"
  echo "Try: dcbuild --help"
  exit 1
fi

echo "📦 Building stage: ${BUILD_TARGET}"

# e.g. utilcntr-node
IMAGE_NAME="${IMAGE_PREFIX}-${SERVICE}"
# e.g. javierfraga/utilcntr-node
FULL_IMAGE="${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}"
# e.g. ~/.*/utiilty-containers/node
SERVICE_PATH="${SCRIPT_DIR}/${SERVICE}"

# 🔍 Check if service directory exists
if [[ ! -d "$SERVICE_PATH" ]]; then
  echo "❌ Service directory does not exist: $SERVICE_PATH"
  exit 1
fi

# 🔧 Ensure buildx builder exists
if ! docker buildx inspect >/dev/null 2>&1; then
  echo "🔧 Creating buildx builder..."
  docker buildx create --use
fi

# 🧱 Pass build arguments from .env
BUILD_ARG_FLAGS=(
  "--build-arg" "APP_DIR=${APP_DIR}"
  "--build-arg" "FILES_DIR=${FILES_DIR}"
)

# 🏷 Prepare tags
BUILD_TAG_ARGS=()
for tag in "${TAGS[@]}"; do
  echo "🏷 Adding tag: ${FULL_IMAGE}:${tag}"
  BUILD_TAG_ARGS+=( "--tag" "${FULL_IMAGE}:${tag}" )
done

# 🚀 Build and push for multi-arch
docker buildx build \
  --no-cache \
  --platform linux/amd64,linux/arm64 \
  --target "${BUILD_TARGET}" \
  "${BUILD_ARG_FLAGS[@]}" \
  "${BUILD_TAG_ARGS[@]}" \
  --push \
  "$SERVICE_PATH"
