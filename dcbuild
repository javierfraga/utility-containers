#!/bin/bash

# üìç Resolve script directory (even if symlinked)
SOURCE="${BASH_SOURCE[0]:-$0}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# üì• Load environment variables
ENV_FILE="${SCRIPT_DIR}/.env"
if [[ -f "$ENV_FILE" ]]; then
  source "$ENV_FILE"
else
  echo "‚ùå Missing .env file: $ENV_FILE"
  exit 1
fi

# üÜò Help output
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "DESCRIPTION: Builds and pushes a multi-arch Docker image using buildx for a given service."
  echo
  echo "USAGE:"
  echo "  dcbuild <service> <version> [latest]"
  echo
  echo "ARGUMENTS:"
  echo "  <service>      Name of the service directory (e.g., python, node, etc.)"
  echo "  <version>      Version tag to apply (e.g., v0.01)"
  echo "  [latest]       Optional ‚Äî also tag the image as 'latest'"
  echo
  echo "EXAMPLE:"
  echo "  dcbuild python v0.01 latest"
  echo
  echo "This will build ./python and push:"
  echo "  ${DOCKERHUB_NAMESPACE}/utilcntr-python:v0.01"
  echo "  ${DOCKERHUB_NAMESPACE}/utilcntr-python:latest"
  exit 0
fi

SERVICE="$1"
VERSION="$2"
INCLUDE_LATEST="$3"

if [[ -z "$SERVICE" || -z "$VERSION" ]]; then
  echo "‚ùå Usage: dcbuild <service> <version> [latest]"
  echo "Try: dcbuild --help"
  exit 1
fi

IMAGE_NAME="utilcntr-${SERVICE}"
FULL_IMAGE="${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}"

# üîç Ensure buildx builder exists
if ! docker buildx inspect >/dev/null 2>&1; then
  echo "üîß Creating buildx builder..."
  docker buildx create --use
fi

# üèó Prepare tag arguments
TAGS=( "--tag" "${FULL_IMAGE}:${VERSION}" )
if [[ "$INCLUDE_LATEST" == "latest" ]]; then
  TAGS+=( "--tag" "${FULL_IMAGE}:latest" )
fi

# üöÄ Build and push for multi-arch
echo "üèó Building and pushing ${FULL_IMAGE}:${VERSION}..."
docker buildx build \
  --platform linux/amd64,linux/arm64 \
  "${TAGS[@]}" \
  --push \
  "./${SERVICE}"

