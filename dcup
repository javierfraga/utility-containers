#!/bin/bash

# üìç Resolve absolute path to this script
SOURCE="${BASH_SOURCE[0]:-$0}"
while [ -h "$SOURCE" ]; do
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done
REPO_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"

# üîó Load helpers
source "${REPO_DIR}/helpers.sh"

# üîó Load env vars (DOCKERHUB_NAMESPACE, IMAGE_PREFIX)
if [[ -f "${REPO_DIR}/.env" ]]; then
  source "${REPO_DIR}/.env"
else
  echo "‚ùå Missing .env file at ${REPO_DIR}/.env"
  exit 1
fi

# üîß Run persistent container for a project
_parse_args "$@" || exit $?

# Create full image name
image="${DOCKERHUB_NAMESPACE}/${IMAGE_PREFIX}-${SERVICE}:${IMAGE_TAG}"

# export for docker-compose.yaml
export FULL_IMAGE_TAG="${image}"  # üëà makes it available to docker compose

project="${PROJECT_NAME:-$(basename "$PWD")}"

# üåü Default shell logic (zsh > bash > sh)
if [[ -z "$REQUESTED_SHELL" ]]; then
  for shell in zsh bash sh; do
    if _validate_shell "$image" "$shell"; then
      REQUESTED_SHELL="$shell"
      break
    fi
  done
  if [[ -z "$REQUESTED_SHELL" ]]; then
    echo "‚ùå No supported shell found in image: $image"
    exit 1
  fi
else
  _validate_shell "$image" "$REQUESTED_SHELL" || {
    echo "‚ùå Shell '$REQUESTED_SHELL' not found in image: $image"
    exit 1
  }
fi

# üì¶ Export PORT_MAPPINGS if provided via --port
if [[ "${#USER_PORTS[@]}" -gt 0 ]]; then
  PORT_MAPPINGS=$(IFS=, ; echo "${USER_PORTS[*]}")
  export PORT_MAPPINGS
  echo "üí° Overriding ports for service '$SERVICE':"
  for p in "${USER_PORTS[@]}"; do
    echo "  - $p"
  done
fi

# Need this for docker-compose.yaml in --file option below
export HOST_WORKDIR="$(pwd)"
echo "üîß Starting: $image (project: $project)"
echo "üîß Starting: In this location: $HOST_WORKDIR"

docker compose \
  --file "${REPO_DIR}/docker-compose.yaml" \
  --project-name "$project" \
  up \
  --detach \
  "${SERVICE}"

container=$(_find_latest_container "$SERVICE") || exit 1

echo "üõ†  Attaching to container: $container"
docker exec \
  --interactive \
  --tty \
  "$container" "$REQUESTED_SHELL"

