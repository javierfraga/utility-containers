#!/bin/bash

# 📍 Resolve absolute path to script directory (even if symlinked)
# Get the source of the script: BASH_SOURCE[0] if available, else fallback to $0
SOURCE="${BASH_SOURCE[0]:-$0}"

# Follow symlinks until we reach the real file
while [ -h "$SOURCE" ]; do
  # Get the directory that contains the symlink
  DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"
  # Resolve the symlink target
  SOURCE="$(readlink "$SOURCE")"
  # If the resolved path is relative, prepend the directory to make it absolute
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE"
done
REPO_DIR="$(cd -P "$(dirname "$SOURCE")" >/dev/null 2>&1 && pwd)"  # Final resolved script location

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "DESCRIPTION: Stop persistent containers started via dcup (but don't remove them)."
  echo "Usage:"
  echo "  dcstop                        # stop containers for current directory"
  echo "  dcstop <proj1> [proj2 ...]    # stop containers in multiple projects"
  echo
  echo "Example:"
  echo "  dcstop dev tmp"
  echo "  => stops dev-node-1 and tmp-node-1"
  exit 0
fi

# 🧳 Capture all arguments as an array of project names (e.g., dcstop proj1 proj2 ...)
projects=("$@")

# 📂 If no projects were passed, default to the current directory name
# This allows you to simply run `dcstop` inside a project folder without arguments
[[ ${#projects[@]} -eq 0 ]] && projects+=("$(basename "$PWD")")

# 🔁 Loop over each project and pause it
for project in "${projects[@]}"; do
  echo "🛑 Stopping all containers in project: $project"
  # 🔻 Pauses (but stays persistent in dockerps) containers, networks, volumes for this project
  #  --file "${REPO_DIR}/docker-compose.yaml" \  # Specify main compose file explicitly
  #  --project-name "$project" \  # Override project name (instead of defaulting to directory)
  docker compose \
    --file "${REPO_DIR}/docker-compose.yaml" \
    --project-name "$project" \
    stop
done

